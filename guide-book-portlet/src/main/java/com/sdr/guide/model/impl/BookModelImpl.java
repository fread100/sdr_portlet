package com.sdr.guide.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.util.PortalUtil;

import com.sdr.guide.model.Book;
import com.sdr.guide.model.BookModel;
import com.sdr.guide.model.BookSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Book service. Represents a row in the &quot;test_Book&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.sdr.guide.model.BookModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link BookImpl}.
 * </p>
 *
 * @author leegyuseong
 * @see BookImpl
 * @see com.sdr.guide.model.Book
 * @see com.sdr.guide.model.BookModel
 * @generated
 */
@JSON(strict = true)
public class BookModelImpl extends BaseModelImpl<Book> implements BookModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a book model instance should use the {@link com.sdr.guide.model.Book} interface instead.
     */
    public static final String TABLE_NAME = "test_Book";
    public static final Object[][] TABLE_COLUMNS = {
            { "gusetbookId", Types.INTEGER },
            { "title", Types.VARCHAR },
            { "content", Types.VARCHAR },
            { "groupId", Types.BIGINT },
            { "companyId", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "userName", Types.VARCHAR },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "deleteDate", Types.TIMESTAMP }
        };
    public static final String TABLE_SQL_CREATE = "create table test_Book (gusetbookId INTEGER not null primary key,title VARCHAR(75) null,content VARCHAR(75) null,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,deleteDate DATE null)";
    public static final String TABLE_SQL_DROP = "drop table test_Book";
    public static final String ORDER_BY_JPQL = " ORDER BY book.gusetbookId ASC";
    public static final String ORDER_BY_SQL = " ORDER BY test_Book.gusetbookId ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.sdr.guide.model.Book"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.sdr.guide.model.Book"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.sdr.guide.model.Book"));
    private static ClassLoader _classLoader = Book.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Book.class };
    private int _gusetbookId;
    private String _title;
    private String _content;
    private long _groupId;
    private long _companyId;
    private long _userId;
    private String _userUuid;
    private String _userName;
    private Date _createDate;
    private Date _modifiedDate;
    private Date _deleteDate;
    private Book _escapedModel;

    public BookModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static Book toModel(BookSoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        Book model = new BookImpl();

        model.setGusetbookId(soapModel.getGusetbookId());
        model.setTitle(soapModel.getTitle());
        model.setContent(soapModel.getContent());
        model.setGroupId(soapModel.getGroupId());
        model.setCompanyId(soapModel.getCompanyId());
        model.setUserId(soapModel.getUserId());
        model.setUserName(soapModel.getUserName());
        model.setCreateDate(soapModel.getCreateDate());
        model.setModifiedDate(soapModel.getModifiedDate());
        model.setDeleteDate(soapModel.getDeleteDate());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<Book> toModels(BookSoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<Book> models = new ArrayList<Book>(soapModels.length);

        for (BookSoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public int getPrimaryKey() {
        return _gusetbookId;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setGusetbookId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _gusetbookId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Book.class;
    }

    @Override
    public String getModelClassName() {
        return Book.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("gusetbookId", getGusetbookId());
        attributes.put("title", getTitle());
        attributes.put("content", getContent());
        attributes.put("groupId", getGroupId());
        attributes.put("companyId", getCompanyId());
        attributes.put("userId", getUserId());
        attributes.put("userName", getUserName());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("deleteDate", getDeleteDate());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer gusetbookId = (Integer) attributes.get("gusetbookId");

        if (gusetbookId != null) {
            setGusetbookId(gusetbookId);
        }

        String title = (String) attributes.get("title");

        if (title != null) {
            setTitle(title);
        }

        String content = (String) attributes.get("content");

        if (content != null) {
            setContent(content);
        }

        Long groupId = (Long) attributes.get("groupId");

        if (groupId != null) {
            setGroupId(groupId);
        }

        Long companyId = (Long) attributes.get("companyId");

        if (companyId != null) {
            setCompanyId(companyId);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String userName = (String) attributes.get("userName");

        if (userName != null) {
            setUserName(userName);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Date deleteDate = (Date) attributes.get("deleteDate");

        if (deleteDate != null) {
            setDeleteDate(deleteDate);
        }
    }

    @JSON
    @Override
    public int getGusetbookId() {
        return _gusetbookId;
    }

    @Override
    public void setGusetbookId(int gusetbookId) {
        _gusetbookId = gusetbookId;
    }

    @JSON
    @Override
    public String getTitle() {
        if (_title == null) {
            return StringPool.BLANK;
        } else {
            return _title;
        }
    }

    @Override
    public void setTitle(String title) {
        _title = title;
    }

    @JSON
    @Override
    public String getContent() {
        if (_content == null) {
            return StringPool.BLANK;
        } else {
            return _content;
        }
    }

    @Override
    public void setContent(String content) {
        _content = content;
    }

    @JSON
    @Override
    public long getGroupId() {
        return _groupId;
    }

    @Override
    public void setGroupId(long groupId) {
        _groupId = groupId;
    }

    @JSON
    @Override
    public long getCompanyId() {
        return _companyId;
    }

    @Override
    public void setCompanyId(long companyId) {
        _companyId = companyId;
    }

    @JSON
    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    @JSON
    @Override
    public String getUserName() {
        if (_userName == null) {
            return StringPool.BLANK;
        } else {
            return _userName;
        }
    }

    @Override
    public void setUserName(String userName) {
        _userName = userName;
    }

    @JSON
    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @JSON
    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @JSON
    @Override
    public Date getDeleteDate() {
        return _deleteDate;
    }

    @Override
    public void setDeleteDate(Date deleteDate) {
        _deleteDate = deleteDate;
    }

    @Override
    public Book toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Book) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        BookImpl bookImpl = new BookImpl();

        bookImpl.setGusetbookId(getGusetbookId());
        bookImpl.setTitle(getTitle());
        bookImpl.setContent(getContent());
        bookImpl.setGroupId(getGroupId());
        bookImpl.setCompanyId(getCompanyId());
        bookImpl.setUserId(getUserId());
        bookImpl.setUserName(getUserName());
        bookImpl.setCreateDate(getCreateDate());
        bookImpl.setModifiedDate(getModifiedDate());
        bookImpl.setDeleteDate(getDeleteDate());

        bookImpl.resetOriginalValues();

        return bookImpl;
    }

    @Override
    public int compareTo(Book book) {
        int primaryKey = book.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Book)) {
            return false;
        }

        Book book = (Book) obj;

        int primaryKey = book.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Book> toCacheModel() {
        BookCacheModel bookCacheModel = new BookCacheModel();

        bookCacheModel.gusetbookId = getGusetbookId();

        bookCacheModel.title = getTitle();

        String title = bookCacheModel.title;

        if ((title != null) && (title.length() == 0)) {
            bookCacheModel.title = null;
        }

        bookCacheModel.content = getContent();

        String content = bookCacheModel.content;

        if ((content != null) && (content.length() == 0)) {
            bookCacheModel.content = null;
        }

        bookCacheModel.groupId = getGroupId();

        bookCacheModel.companyId = getCompanyId();

        bookCacheModel.userId = getUserId();

        bookCacheModel.userName = getUserName();

        String userName = bookCacheModel.userName;

        if ((userName != null) && (userName.length() == 0)) {
            bookCacheModel.userName = null;
        }

        Date createDate = getCreateDate();

        if (createDate != null) {
            bookCacheModel.createDate = createDate.getTime();
        } else {
            bookCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            bookCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            bookCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        Date deleteDate = getDeleteDate();

        if (deleteDate != null) {
            bookCacheModel.deleteDate = deleteDate.getTime();
        } else {
            bookCacheModel.deleteDate = Long.MIN_VALUE;
        }

        return bookCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{gusetbookId=");
        sb.append(getGusetbookId());
        sb.append(", title=");
        sb.append(getTitle());
        sb.append(", content=");
        sb.append(getContent());
        sb.append(", groupId=");
        sb.append(getGroupId());
        sb.append(", companyId=");
        sb.append(getCompanyId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", userName=");
        sb.append(getUserName());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", deleteDate=");
        sb.append(getDeleteDate());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.sdr.guide.model.Book");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>gusetbookId</column-name><column-value><![CDATA[");
        sb.append(getGusetbookId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>title</column-name><column-value><![CDATA[");
        sb.append(getTitle());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>content</column-name><column-value><![CDATA[");
        sb.append(getContent());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>groupId</column-name><column-value><![CDATA[");
        sb.append(getGroupId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>companyId</column-name><column-value><![CDATA[");
        sb.append(getCompanyId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userName</column-name><column-value><![CDATA[");
        sb.append(getUserName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>deleteDate</column-name><column-value><![CDATA[");
        sb.append(getDeleteDate());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
